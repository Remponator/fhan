"""
Generated class for {{structure_definition.type}}. 
Time: {{time}}
"""
from dataclasses import dataclass
{% for dependency in structure_definition.dependencies -%}
from fhan.models.{{dir_name}}.{{dependency}} import *
{% endfor %}
{%- if structure_definition.base_class %}
{%- if structure_definition.base_import_string -%}
from {{structure_definition.base_import_string}} import {{structure_definition.base_class}}
{%- else -%}
from fhan.models.{{dir_name}}.{{structure_definition.base_class}} import *
{% endif %}
{% endif %}

{%- macro render_backbone_element(element) %}
@dataclass
class {{ element.type }}({{ element.base_class }}):
    """ {{ element.description }}
    {%- for child in element.defined_children -%}
    {%- if child.is_primitive -%}
    :param {{ child.python_type.__name__ }} {{ child.name }}: {{ child.short }}
    {% else -%}
    :param {{ child.type }} {{ child.name }}: {{ child.short }}
    {% endif -%}
    {% endfor -%}
    """

    {%- for child in element.defined_children -%}
    {%- if child.is_primitive %}
    {{ child.name }}: {{ child.python_type.__name__ }} = None
    {% else -%}
    {{ child.name }}: {% if child.is_array %}list[{{ child.type }}]{% else %}"{{ child.type }}"{% endif %} = None
    {% endif -%}
    {% endfor -%}
{% endmacro -%}

{%- macro render_backbone_elements(elements) %}
{%- for element in elements %}
    {% if element.backbone_children %}
        {{ render_backbone_elements(element.backbone_children) }}  {# Recursively call render_backbone_elements for backbone_children #}
    {% endif %}
    {{ render_backbone_element(element) }}
{% endfor -%}
{% endmacro -%}

{{ render_backbone_elements(structure_definition.backbone_elements) -}}
@dataclass
class {{structure_definition.type}}{% if structure_definition.base_class %}({{structure_definition.base_class}}){% endif %}:
    """ {{structure_definition.description}}
    {% for element in structure_definition.defined_elements -%}
    {%- if element.is_primitive -%}
    :param {{element.python_type.__name__}} {{element.name}}: {{element.short}}
    {% else -%}
    :param {{element.type}} {{element.name}}: {{element.short}}
    {% endif -%}
    {% endfor -%}
    """

    {%- for element in structure_definition.defined_elements -%}
    {% if element.is_primitive %}
    {{element.name}}: {{element.python_type.__name__}} = None
    {% else %}
    {{element.name}}: {%if element.is_array%}{%raw%}list[{%endraw%}{%endif%}"{{element.type}}"{%if element.is_array%}{%raw%}]{%endraw%}{%endif%} = None
    {% endif -%}
    {% endfor %}
