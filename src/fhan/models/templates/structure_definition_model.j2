"""
Generated class for {{structure_definition.type}}. 
Time: {{time}}
"""
{% for dependency in structure_definition.dependencies -%}
from fhan.models.{{dir_name}}.{{dependency}} import *
{% endfor %}
{%- if structure_definition.base_class %}
{%- if structure_definition.base_import_string -%}
from {{structure_definition.base_import_string}} import {{structure_definition.base_class}}
{%- else -%}
from fhan.models.{{dir_name}}.{{structure_definition.base_class}} import *
{% endif %}
{% endif %}

{%- macro render_contained_element(element) %}

class {{ element.type }}({{ element.base_class }}):
    """ {{ element.description }}
    {%- for child in element.defined_children -%}
    :param {{ child.type_string }} {{ child.name }}: {{ child.short }}
    {% endfor -%}
    """
    def __init__(self, {% for child in element.defined_children %} {{ child.name }}: {{ child.type_string }} = None, {% endfor %}):
        {% for child in element.defined_children %}
        {%- if child.is_array -%}
        self.{{child.name}}: {{child.type_string}} = {{child.name}} or []
        {%- else -%}
        self.{{child.name}}: {{child.type_string}} = {{child.name}} {% endif %}
        {% endfor -%}
{% endmacro -%}

{%- macro render_contained_elements(elements) %}
{%- for element in elements %}
    {% if element.contained_children %}
        {{ render_contained_elements(element.contained_children) }}  {# Recursively call render_contained_elements for contained_children #}
    {% endif %}
    {{ render_contained_element(element) }}
{% endfor %}
{% endmacro -%}

{{ render_contained_elements(structure_definition.contained_elements) -}}

class {{structure_definition.type}}{% if structure_definition.base_class %}({{structure_definition.base_class}}){% endif %}:
    """ {{structure_definition.description}}
    {% for element in structure_definition.defined_elements -%}
    :param {{element.type_string}} {{element.name}}: {{element.short}}
    {% endfor -%}
    """
    def __init__(self, resourceType: str = "{{structure_definition.type}}", {% for element in structure_definition.defined_elements %} {{element.name}}: {{element.type_string}} = None, {% endfor %}):
        self.resourceType: str = resourceType or "{{structure_definition.type}}"
        {% for element in structure_definition.defined_elements %}
        {%- if element.is_array -%}
        self.{{element.name}}: {{element.type_string}} = {{element.name}} or []
        {%- else -%}
        self.{{element.name}}: {{element.type_string}} = {{element.name}} {% endif %}
        {% endfor -%}